/*C3*/SET SCHEMA PUBLIC
DISCONNECT
/*C3*/SET SCHEMA PUBLIC
DISCONNECT
/*C4*/SET SCHEMA PUBLIC
DELETE FROM DIARY WHERE ID=620
INSERT INTO DIARY VALUES(620,'2023-12-29 13:04:25','<html>\u000a<head>\u000a<meta content="text/html;charset=UTF-8"/>\u000a</head>\u000a<body>\u000a<h1>Java-\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u0445 Nuxus</h1>\u000a<hr/>\u000a\u000a<h2>pom.xml</h2>\u000a<pre><code class="lang-xml"><span class="xml"><span class="php"><span class="hljs-meta">&lt;?</span>xml version=<span class="hljs-string">"1.0"</span> encoding=<span class="hljs-string">"UTF-8"</span><span class="hljs-meta">?&gt;</span></span>\u000a<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0"</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span>\u000a         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>\u000a    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ru.home<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>NexusFind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NexusFind<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>NexusFind<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openapitools<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind-nullable<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.findbugs<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsr305<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.5.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents.client5<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.17.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>\u000a\u000a    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>\u000a                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span>\u000a                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\u000a\u000a            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openapitools<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>openapi-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>7.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>\u000a                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-spring-client<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>generate<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">inputSpec</span>&gt;</span>$</span><span class="hljs-template-variable">{project.basedir}</span><span class="xml">/src/main/resources/nexus-api.json<span class="hljs-tag">&lt;/<span class="hljs-name">inputSpec</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">generatorName</span>&gt;</span>java<span class="hljs-tag">&lt;/<span class="hljs-name">generatorName</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">generateApiTests</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">generateApiTests</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">generateModelTests</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">generateModelTests</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">configOptions</span>&gt;</span>\u000a                                <span class="hljs-tag">&lt;<span class="hljs-name">java8</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">java8</span>&gt;</span>\u000a                                <span class="hljs-tag">&lt;<span class="hljs-name">dateLibrary</span>&gt;</span>custom<span class="hljs-tag">&lt;/<span class="hljs-name">dateLibrary</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;/<span class="hljs-name">configOptions</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">typeMappings</span>&gt;</span>\u000a                                <span class="hljs-tag">&lt;<span class="hljs-name">typeMapping</span>&gt;</span>OffsetDateTime=String<span class="hljs-tag">&lt;/<span class="hljs-name">typeMapping</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;/<span class="hljs-name">typeMappings</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">importMappings</span>&gt;</span>\u000a                                <span class="hljs-tag">&lt;<span class="hljs-name">importMapping</span>&gt;</span>java.time.OffsetDateTime=java.lang.String<span class="hljs-tag">&lt;/<span class="hljs-name">importMapping</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;/<span class="hljs-name">importMappings</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">modelPackage</span>&gt;</span>ru.home.nexusfind.model<span class="hljs-tag">&lt;/<span class="hljs-name">modelPackage</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">apiPackage</span>&gt;</span>ru.home.nexusfind.api<span class="hljs-tag">&lt;/<span class="hljs-name">apiPackage</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">invokerPackage</span>&gt;</span>ru.home.nexusfind.invoker<span class="hljs-tag">&lt;/<span class="hljs-name">invokerPackage</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">generateModelDocumentation</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">generateModelDocumentation</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">generateApiDocumentation</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">generateApiDocumentation</span>&gt;</span>\u000a                            <span class="hljs-tag">&lt;<span class="hljs-name">library</span>&gt;</span>resttemplate<span class="hljs-tag">&lt;/<span class="hljs-name">library</span>&gt;</span>\u000a                        <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>\u000a                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>\u000a                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>\u000a            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>\u000a        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>\u000a    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>\u000a\u000a<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span>\u000a</code></pre>\u000a\u000a<h2>NexusFindApplication.java</h2>\u000a<pre><code class="lang-java">package ru.<span class="hljs-built_in">home</span>.nexusfind;\u000a\u000a<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;\u000a<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\u000a\u000a@SpringBootApplication\u000a<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> NexusFindApplication {\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) {\u000a        SpringApplication.<span class="hljs-built_in">run</span>(NexusFindApplication.<span class="hljs-keyword">class</span>, args);\u000a    }\u000a\u000a}\u000a</code></pre>\u000a\u000a<h2>NexusApiConfig.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.config;\u000a\u000a<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;\u000a<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;\u000a<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.AssetsApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.RepositoryManagementApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.SearchApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.invoker.ApiClient;\u000a\u000a<span class="hljs-meta">@Configuration</span>\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NexusApiConfig</span> </span>{\u000a    <span class="hljs-meta">@Value(<span class="hljs-meta-string">"<span class="hljs-subst">${nexus.base-url}</span>"</span>)</span>\u000a    <span class="hljs-keyword">private</span> String baseUrl;\u000a\u000a    <span class="hljs-meta">@Bean</span>\u000a    <span class="hljs-keyword">public</span> ApiClient apiClient(RestTemplate trustRestTemplate) {\u000a        ApiClient apiClient = new ApiClient(trustRestTemplate);\u000a        apiClient.setBasePath(baseUrl);\u000a        <span class="hljs-keyword">return</span> apiClient;\u000a    }\u000a\u000a    <span class="hljs-meta">@Bean</span>\u000a    <span class="hljs-keyword">public</span> RepositoryManagementApi repositoryApi(ApiClient apiClient) {\u000a        <span class="hljs-keyword">return</span> new RepositoryManagementApi(apiClient);\u000a    }\u000a\u000a    <span class="hljs-meta">@Bean</span>\u000a    <span class="hljs-keyword">public</span> SearchApi searchApi(ApiClient apiClient) {\u000a        <span class="hljs-keyword">return</span> new SearchApi(apiClient);\u000a    }\u000a\u000a    <span class="hljs-meta">@Bean</span>\u000a    <span class="hljs-keyword">public</span> AssetsApi assetsApi(ApiClient apiClient) {\u000a        <span class="hljs-keyword">return</span> new AssetsApi(apiClient);\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>RestConfig.java</h2>\u000a<pre><code class="lang-java">package ru.home.nexusfind.config;\u000a\u000a<span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\u000a<span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;\u000a<span class="hljs-keyword">import</span> org.apache.hc.client5.http.io.HttpClientConnectionManager;\u000a<span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;\u000a<span class="hljs-keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;\u000a<span class="hljs-keyword">import</span> org.apache.http.conn.ssl.TrustStrategy;\u000a<span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.HttpClients;\u000a<span class="hljs-keyword">import</span> org.apache.http.ssl.SSLContexts;\u000a<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;\u000a<span class="hljs-keyword">import</span> org.springframework.boot.web.client.RestTemplateBuilder;\u000a<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;\u000a<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;\u000a<span class="hljs-keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a\u000a<span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;\u000a<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;\u000a<span class="hljs-keyword">import</span> java.security.KeyManagementException;\u000a<span class="hljs-keyword">import</span> java.security.KeyStoreException;\u000a<span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;\u000a\u000a@<span class="hljs-type">Configuration</span>\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestConfig</span> </span>{\u000a    @<span class="hljs-type">Value</span>(<span class="hljs-string">"${nexus.username}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> username;\u000a    @<span class="hljs-type">Value</span>(<span class="hljs-string">"${nexus.password}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> password;\u000a\u000a    @<span class="hljs-type">Bean</span>(<span class="hljs-string">"trustRestTemplate"</span>)\u000a    <span class="hljs-keyword">public</span> <span class="hljs-type">RestTemplate</span> trustRestTemplate() <span class="hljs-keyword">throws</span> <span class="hljs-type">NoSuchAlgorithmException</span>, <span class="hljs-type">KeyStoreException</span>, <span class="hljs-type">KeyManagementException</span> {\u000a        <span class="hljs-type">TrustStrategy</span> trustStrategy = (x509, s) -&gt; <span class="hljs-literal">true</span>;\u000a        <span class="hljs-type">SSLContext</span> sslContext = <span class="hljs-type">SSLContexts</span>.custom().loadTrustMaterial(null, trustStrategy).build();\u000a        <span class="hljs-type">SSLConnectionSocketFactory</span> csf = new <span class="hljs-type">SSLConnectionSocketFactory</span>(sslContext, new <span class="hljs-type">NoopHostnameVerifier</span>());\u000a        <span class="hljs-type">HttpClientConnectionManager</span> ccm = <span class="hljs-type">PoolingHttpClientConnectionManagerBuilder</span>.create()\u000a                .setSSLSocketFactory(csf).build();\u000a        <span class="hljs-type">CloseableHttpClient</span> httpClient = <span class="hljs-type">HttpClients</span>.custom().setConnectionManager(ccm).build();\u000a        <span class="hljs-type">HttpComponentsClientHttpRequestFactory</span> requestFactory = new <span class="hljs-type">HttpComponentsClientHttpRequestFactory</span>();\u000a        requestFactory.setHttpClient(httpClient);\u000a        <span class="hljs-keyword">return</span> new <span class="hljs-type">RestTemplateBuilder</span>()\u000a                .requestFactory(() -&gt; requestFactory)\u000a                .basicAuthentication(username, password, <span class="hljs-type">StandardCharsets</span>.<span class="hljs-type">UTF_8</span>)\u000a                .build();\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>HttpUtils.java</h2>\u000a<pre><code class="lang-java">package ru.home.nexusfind.utils;\u000a\u000a<span class="hljs-keyword">import</span> lombok.experimental.UtilityClass;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.binary.StringUtils;\u000a<span class="hljs-keyword">import</span> org.jsoup.Jsoup;\u000a<span class="hljs-keyword">import</span> org.jsoup.nodes.Document;\u000a<span class="hljs-keyword">import</span> org.jsoup.select.Elements;\u000a<span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;\u000a<span class="hljs-keyword">import</span> org.springframework.http.MediaType;\u000a<span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;\u000a\u000a<span class="hljs-keyword">import</span> java.util.Optional;\u000a<span class="hljs-keyword">import</span> java.util.Set;\u000a<span class="hljs-keyword">import</span> java.util.stream.Collectors;\u000a\u000a@<span class="hljs-type">UtilityClass</span>\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtils</span> </span>{\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Set</span>&lt;<span class="hljs-type">String</span>&gt; parseHtml(<span class="hljs-type">String</span> html) {\u000a        <span class="hljs-type">Document</span> document = <span class="hljs-type">Jsoup</span>.parse(html);\u000a        <span class="hljs-type">Elements</span> links = document.select(<span class="hljs-string">"a"</span>);\u000a        <span class="hljs-keyword">return</span> links.stream()\u000a                .<span class="hljs-built_in">map</span>(elem -&gt; elem.attr(<span class="hljs-string">"href"</span>))\u000a                .<span class="hljs-built_in">filter</span>(href -&gt; !<span class="hljs-type">StringUtils</span>.equals(href, <span class="hljs-string">"../"</span>))\u000a                .collect(<span class="hljs-type">Collectors</span>.toSet());\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> boolean isHtml(<span class="hljs-type">ResponseEntity</span>&lt;<span class="hljs-type">String</span>&gt; response) {\u000a        <span class="hljs-keyword">return</span> !<span class="hljs-type">Optional</span>.of(response)\u000a                .<span class="hljs-built_in">map</span>(<span class="hljs-type">ResponseEntity</span>::getHeaders)\u000a                .<span class="hljs-built_in">map</span>(<span class="hljs-type">HttpHeaders</span>::getContentType)\u000a                .<span class="hljs-built_in">filter</span>(contentType -&gt; contentType.includes(<span class="hljs-type">MediaType</span>.<span class="hljs-type">TEXT_HTML</span>))\u000a                .isEmpty();\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> boolean isXml(<span class="hljs-type">ResponseEntity</span>&lt;<span class="hljs-type">String</span>&gt; response) {\u000a        <span class="hljs-keyword">return</span> !<span class="hljs-type">Optional</span>.of(response)\u000a                .<span class="hljs-built_in">map</span>(<span class="hljs-type">ResponseEntity</span>::getHeaders)\u000a                .<span class="hljs-built_in">map</span>(<span class="hljs-type">HttpHeaders</span>::getContentType)\u000a                .<span class="hljs-built_in">filter</span>(contentType -&gt; contentType.includes(<span class="hljs-type">MediaType</span>.<span class="hljs-type">APPLICATION_XML</span>))\u000a                .isEmpty();\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>ApiService.java</h2>\u000a<pre><code class="lang-java">package ru.home.nexusfind.service;\u000a\u000a<span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.binary.StringUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.AssetsApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.RepositoryManagementApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.api.SearchApi;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.model.*;\u000a\u000a<span class="hljs-keyword">import</span> java.util.ArrayList;\u000a<span class="hljs-keyword">import</span> java.util.<span class="hljs-built_in">List</span>;\u000a<span class="hljs-keyword">import</span> java.util.Optional;\u000a\u000a@Service\u000a@RequiredArgsConstructor\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> class ApiService {\u000a    <span class="hljs-keyword">private</span> final RepositoryManagementApi repositoryApi;\u000a    <span class="hljs-keyword">private</span> final AssetsApi assetsApi;\u000a    <span class="hljs-keyword">private</span> final SearchApi searchApi;\u000a\u000a    <span class="hljs-keyword">public</span> Optional&lt;RepositoryXO&gt; findRepo(<span class="hljs-built_in">String</span> repoName) {\u000a        <span class="hljs-keyword">return</span> repositoryApi.getRepositories1().stream()\u000a                .filter(repo -&gt; StringUtils.<span class="hljs-keyword">equals</span>(repoName, repo.getName()))\u000a                .findFirst();\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;AssetXO&gt; getAssets(<span class="hljs-built_in">String</span> repoName, <span class="hljs-built_in">String</span> <span class="hljs-built_in">keyword</span>) {\u000a        <span class="hljs-built_in">String</span> continuationToken = <span class="hljs-built_in">null</span>;\u000a        <span class="hljs-built_in">List</span>&lt;AssetXO&gt; assets = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();\u000a        <span class="hljs-keyword">do</span> {\u000a            PageAssetXO pageAsset = assetsApi.getAssets(repoName, continuationToken);\u000a            <span class="hljs-keyword">if</span> (pageAsset != <span class="hljs-built_in">null</span> &amp;&amp; !CollectionUtils.isEmpty(pageAsset.getItems())) {\u000a                <span class="hljs-built_in">List</span>&lt;AssetXO&gt; items = pageAsset.getItems().stream()\u000a                        .filter(asset -&gt; prefixFilter(asset, <span class="hljs-built_in">keyword</span>))\u000a                        .filter(asset -&gt; postfixFilter(asset, <span class="hljs-string">".jar"</span>))\u000a                        .peek(asset -&gt; <span class="hljs-keyword">log</span>.info(<span class="hljs-string">"asset: {}"</span>, asset))\u000a                        .toList();\u000a                <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(items)) {\u000a                    assets.addAll(items);\u000a                }\u000a                continuationToken = pageAsset.getContinuationToken();\u000a            } <span class="hljs-keyword">else</span> {\u000a                continuationToken = <span class="hljs-built_in">null</span>;\u000a            }\u000a        } <span class="hljs-keyword">while</span> (continuationToken != <span class="hljs-built_in">null</span>);\u000a        <span class="hljs-keyword">return</span> assets;\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;AssetXO&gt; searchAsset(RepositoryXO repo, <span class="hljs-built_in">String</span> query) {\u000a        <span class="hljs-built_in">String</span> continuationToken = <span class="hljs-built_in">null</span>;\u000a        <span class="hljs-built_in">List</span>&lt;AssetXO&gt; assets = <span class="hljs-literal">new</span> ArrayList&lt;&gt;();\u000a        <span class="hljs-keyword">do</span> {\u000a            PageAssetXO pageAsset = searchApi.searchAssets(\u000a                    continuationToken,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    query,\u000a                    repo.getName(),\u000a                    repo.getFormat(),\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-string">"jar"</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>,\u000a                    <span class="hljs-built_in">null</span>\u000a            );\u000a            <span class="hljs-keyword">if</span> (pageAsset != <span class="hljs-built_in">null</span> &amp;&amp; !CollectionUtils.isEmpty(pageAsset.getItems())) {\u000a                assets.addAll(pageAsset.getItems());\u000a                continuationToken = pageAsset.getContinuationToken();\u000a            } <span class="hljs-keyword">else</span> {\u000a                continuationToken = <span class="hljs-built_in">null</span>;\u000a            }\u000a        } <span class="hljs-keyword">while</span> (continuationToken != <span class="hljs-built_in">null</span>);\u000a        <span class="hljs-keyword">return</span> assets;\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> prefixFilter(AssetXO asset, <span class="hljs-built_in">String</span> <span class="hljs-built_in">keyword</span>) {\u000a        <span class="hljs-keyword">return</span> !Optional.ofNullable(asset).<span class="hljs-built_in">map</span>(AssetXO<span class="hljs-type">::getPath</span>).filter(path -&gt; path.startsWith(<span class="hljs-built_in">keyword</span>)).isEmpty();\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-built_in">boolean</span> postfixFilter(AssetXO asset, <span class="hljs-built_in">String</span> <span class="hljs-built_in">keyword</span>) {\u000a        <span class="hljs-keyword">return</span> !Optional.ofNullable(asset).<span class="hljs-built_in">map</span>(AssetXO<span class="hljs-type">::getPath</span>).filter(path -&gt; path.endsWith(<span class="hljs-built_in">keyword</span>)).isEmpty();\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>FileService.java</h2>\u000a<pre><code class="lang-java">package ru.home.nexusfind.service;\u000a\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;\u000a\u000a<span class="hljs-keyword">import</span> java.io.IOException;\u000a<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;\u000a<span class="hljs-keyword">import</span> java.nio.file.Files;\u000a<span class="hljs-keyword">import</span> java.nio.file.Path;\u000a<span class="hljs-keyword">import</span> java.nio.file.Paths;\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a\u000a@<span class="hljs-type">Service</span>\u000a@<span class="hljs-type">Slf4j</span>\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileService</span> </span>{\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-type">FILE_LIST</span> = <span class="hljs-string">"list.txt"</span>;\u000a\u000a    <span class="hljs-keyword">public</span> void saveList(<span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt; lines) {\u000a        <span class="hljs-type">Path</span> path = <span class="hljs-type">Paths</span>.<span class="hljs-keyword">get</span>(<span class="hljs-type">FILE_LIST</span>);\u000a        <span class="hljs-keyword">try</span> {\u000a            <span class="hljs-type">Files</span>.write(path, lines, <span class="hljs-type">StandardCharsets</span>.<span class="hljs-type">UTF_8</span>);\u000a        } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\u000a            log.error(e.getMessage(), e);\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> <span class="hljs-type">List</span>&lt;<span class="hljs-type">String</span>&gt; loadList() {\u000a        <span class="hljs-type">Path</span> path = <span class="hljs-type">Paths</span>.<span class="hljs-keyword">get</span>(<span class="hljs-type">FILE_LIST</span>);\u000a        <span class="hljs-keyword">try</span> {\u000a            <span class="hljs-keyword">return</span> <span class="hljs-type">Files</span>.readAllLines(path);\u000a        } <span class="hljs-keyword">catch</span> (<span class="hljs-type">IOException</span> e) {\u000a            log.error(e.getMessage(), e);\u000a            <span class="hljs-keyword">throw</span> new <span class="hljs-type">RuntimeException</span>();\u000a        }\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>HttpService.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service;\u000a\u000a<span class="hljs-keyword">import</span> lombok.Cleanup;\u000a<span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;\u000a<span class="hljs-keyword">import</span> lombok.<span class="hljs-keyword">extern</span>.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.binary.StringUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;\u000a<span class="hljs-keyword">import</span> org.springframework.http.*;\u000a<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.util.StreamUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a<span class="hljs-keyword">import</span> org.springframework.web.util.UriComponentsBuilder;\u000a<span class="hljs-keyword">import</span> org.w3c.dom.NodeList;\u000a<span class="hljs-keyword">import</span> org.xml.sax.InputSource;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.utils.HttpUtils;\u000a\u000a<span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;\u000a<span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPath;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPathConstants;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPathFactory;\u000a<span class="hljs-keyword">import</span> java.io.File;\u000a<span class="hljs-keyword">import</span> java.io.FileOutputStream;\u000a<span class="hljs-keyword">import</span> java.io.StringReader;\u000a<span class="hljs-keyword">import</span> java.nio.file.Files;\u000a<span class="hljs-keyword">import</span> java.nio.file.Path;\u000a<span class="hljs-keyword">import</span> java.nio.file.Paths;\u000a<span class="hljs-keyword">import</span> java.util.*;\u000a\u000a@Service\u000a@RequiredArgsConstructor\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpService</span> </span>{\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> METADATA_EXP = <span class="hljs-string">"/metadata/versioning/latest"</span>;\u000a\u000a    @Value(<span class="hljs-string">"${nexus.browse-url}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> browseUrl;\u000a    @Value(<span class="hljs-string">"${nexus.starting}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> starting;\u000a\u000a    <span class="hljs-keyword">private</span> final RestTemplate restTemplate;\u000a\u000a    <span class="hljs-keyword">public</span> List&lt;<span class="hljs-keyword">String</span>&gt; browse() {\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();\u000a        browse(list, browseUrl, starting);\u000a        <span class="hljs-keyword">return</span> list;\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> void browse(List&lt;<span class="hljs-keyword">String</span>&gt; list, <span class="hljs-keyword">String</span> basePath, <span class="hljs-keyword">String</span> path) {\u000a        HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpHeaders</span>();\u000a        headers.<span class="hljs-keyword">set</span>(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\u000a        HttpEntity&lt;?&gt; entity = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpEntity</span>&lt;&gt;(headers);\u000a        <span class="hljs-keyword">String</span> uri = UriComponentsBuilder.fromHttpUrl(basePath)\u000a                .path(path)\u000a                .encode()\u000a                .toUriString();\u000a        ResponseEntity&lt;<span class="hljs-keyword">String</span>&gt; response = restTemplate.exchange(uri, HttpMethod.GET, entity, <span class="hljs-keyword">String</span>.class);\u000a\u000a        <span class="hljs-keyword">if</span> (response.getStatusCode().is2xxSuccessful() &amp;&amp; HttpUtils.isHtml(response)) {\u000a            Set&lt;<span class="hljs-keyword">String</span>&gt; links = HttpUtils.parseHtml(response.getBody());\u000a            <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(links)) {\u000a                <span class="hljs-keyword">return</span>;\u000a            }\u000a            Optional&lt;<span class="hljs-keyword">String</span>&gt; optMetadataUri = links.stream().filter(link -&gt; link.endsWith(<span class="hljs-string">"maven-metadata.xml"</span>)).findFirst();\u000a            Optional&lt;<span class="hljs-keyword">String</span>&gt; optVersion = optMetadataUri.flatMap(<span class="hljs-built_in">this</span>:<span class="hljs-type"></span>:getByVersion);\u000a            <span class="hljs-keyword">if</span> (!optMetadataUri.isEmpty() &amp;&amp; !optVersion.isEmpty()) {\u000a                <span class="hljs-keyword">String</span> version = optVersion.<span class="hljs-keyword">get</span>();\u000a                <span class="hljs-keyword">String</span> latestVersion = <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s/"</span>, version);\u000a                links.stream()\u000a                    .filter(link -&gt; StringUtils.equals(link, latestVersion)).findFirst()\u000a                    .ifPresent(linkVersion -&gt; browse(list, uri, linkVersion));\u000a            } <span class="hljs-keyword">else</span> {\u000a                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> link : <span class="hljs-type">links</span>) {\u000a                    <span class="hljs-keyword">if</span> (link.endsWith(<span class="hljs-string">"/"</span>)) {\u000a                        browse(list, uri, link);\u000a                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (link.endsWith(<span class="hljs-string">".jar"</span>)) {\u000a                        list.add(link);\u000a                    }\u000a                }\u000a            }\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> Optional&lt;<span class="hljs-keyword">String</span>&gt; getByVersion(<span class="hljs-keyword">String</span> uri) {\u000a        HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpHeaders</span>();\u000a        headers.<span class="hljs-keyword">set</span>(HttpHeaders.ACCEPT, MediaType.APPLICATION_XHTML_XML_VALUE);\u000a        HttpEntity&lt;?&gt; entity = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpEntity</span>&lt;&gt;(headers);\u000a        <span class="hljs-keyword">try</span> {\u000a            ResponseEntity&lt;<span class="hljs-keyword">String</span>&gt; response = restTemplate.exchange(uri, HttpMethod.GET, entity, <span class="hljs-keyword">String</span>.class);\u000a            <span class="hljs-keyword">String</span> xml = response.getBody();\u000a            <span class="hljs-keyword">if</span> (response.getStatusCode().is2xxSuccessful() &amp;&amp; HttpUtils.isXml(response) &amp;&amp; xml != <span class="hljs-literal">null</span>) {\u000a                DocumentBuilderFactory builderFactory = DocumentBuilderFactory.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();\u000a                DocumentBuilder builder = builderFactory.<span class="hljs-keyword">new</span><span class="hljs-type">DocumentBuilder</span>();\u000a                InputSource is = <span class="hljs-keyword">new</span> <span class="hljs-type">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">StringReader</span>(xml));\u000a                org.w3c.dom.Document xmlDocument = builder.parse(is);\u000a                XPath xPath = XPathFactory.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>().<span class="hljs-keyword">new</span><span class="hljs-type">XPath</span>();\u000a                NodeList nodeList = (NodeList) xPath.compile(METADATA_EXP).evaluate(xmlDocument, XPathConstants.NODESET);\u000a                <span class="hljs-keyword">String</span> version = nodeList.item(<span class="hljs-number">0</span>).getTextContent();\u000a                <span class="hljs-keyword">return</span> Optional.of(version);\u000a            }\u000a        } <span class="hljs-keyword">catch</span> (Exception e) {\u000a            log.error(<span class="hljs-string">"uri: {}, error: {}"</span>, uri, e.getMessage());\u000a        }\u000a        <span class="hljs-keyword">return</span> Optional.empty();\u000a    }\u000a\u000a    <span class="hljs-keyword">public</span> void downloadJar(<span class="hljs-keyword">String</span> localPath, <span class="hljs-keyword">String</span> url) {\u000a        <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span> &amp;&amp; localPath != <span class="hljs-literal">null</span>) {\u000a            <span class="hljs-keyword">try</span> {\u000a                restTemplate.execute(url, HttpMethod.GET, <span class="hljs-literal">null</span>, response -&gt; {\u000a                    Path path = Paths.<span class="hljs-keyword">get</span>(localPath);\u000a                    <span class="hljs-keyword">if</span> (!Files.exists(path.getParent())) {\u000a                        Files.createDirectories(path.getParent());\u000a                    }\u000a                    File file = <span class="hljs-literal">null</span>;\u000a                    <span class="hljs-keyword">if</span> (!Files.exists(path)) {\u000a                        file = Files.createFile(path).toFile();\u000a                        @Cleanup\u000a                        FileOutputStream fis = <span class="hljs-keyword">new</span> <span class="hljs-type">FileOutputStream</span>(file);\u000a                        StreamUtils.copy(response.getBody(), fis);\u000a                    }\u000a                    <span class="hljs-keyword">return</span> file;\u000a                });\u000a            } <span class="hljs-keyword">catch</span> (Exception e) {\u000a                log.error(<span class="hljs-string">"url: {}, error: {}"</span>, url, e.getMessage());\u000a            }\u000a        }\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>NexusFinderStarter.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service;\u000a\u000a<span class="hljs-keyword">import</span> lombok.RequiredArgsConstructor;\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;\u000a<span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner;\u000a<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.model.AssetXO;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.service.async.AsyncAction;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.service.async.AsyncTask;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.service.async.ZipFileAction;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.service.async.ZipTextAction;\u000a\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a<span class="hljs-keyword">import</span> java.util.concurrent.ForkJoinPool;\u000a\u000a@Component\u000a@RequiredArgsConstructor\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> class NexusFindStarter implements CommandLineRunner {\u000a    @Value(<span class="hljs-string">"${nexus.repo}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> repoName;\u000a    @Value(<span class="hljs-string">"${nexus.keyword}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> keyword;\u000a    @Value(<span class="hljs-string">"${nexus.download-starting}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> downloadStarting;\u000a    @Value(<span class="hljs-string">"${nexus.browse-url}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> browseUrl;\u000a    @Value(<span class="hljs-string">"${nexus.starting}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> starting;\u000a    @Value(<span class="hljs-string">"${nexus.find-file}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> findFile;\u000a    @Value(<span class="hljs-string">"${nexus.find-text}"</span>)\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> findText;\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ApiService apiService;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpService httpService;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> FileService fileService;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestTemplate restTemplate;\u000a\u000a    @Override\u000a    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run(<span class="hljs-keyword">String</span>... args) <span class="hljs-keyword">throws</span> Exception {\u000a        findFileAsync();\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> httpListAsync() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        <span class="hljs-keyword">String</span> downloadStartingRepo = <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s%s/"</span>, downloadStarting, repoName);\u000a        AsyncTask asyncTask = <span class="hljs-keyword">new</span> AsyncTask(browseUrl, starting, restTemplate);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; links = ForkJoinPool.commonPool().invoke(asyncTask);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = links.stream()\u000a                .<span class="hljs-built_in">map</span>(link -&gt; <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s;%s"</span>, link.replace(downloadStartingRepo, <span class="hljs-string">""</span>), link))\u000a                .toList();;\u000a        fileService.saveList(lines);\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> httpDownloadAsync() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = fileService.loadList();\u000a        AsyncAction asyncAction = <span class="hljs-keyword">new</span> AsyncAction(lines, restTemplate);\u000a        ForkJoinPool.commonPool().invoke(asyncAction);\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> httpList() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; links = httpService.browse();\u000a        <span class="hljs-keyword">String</span> downloadStartingRepo = <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s%s/"</span>, downloadStarting, repoName);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = links.stream()\u000a                .<span class="hljs-built_in">map</span>(link -&gt; <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s;%s"</span>, link.replace(downloadStartingRepo, <span class="hljs-string">""</span>), link))\u000a                .toList();\u000a        fileService.saveList(lines);\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> httpDownload() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = fileService.loadList();\u000a        lines.stream().forEach(<span class="hljs-built_in">line</span> -&gt; {\u000a            <span class="hljs-keyword">String</span>[] arr = <span class="hljs-built_in">line</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">";"</span>);\u000a            httpService.downloadJar(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]);\u000a        });\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> apiList() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        apiService.findRepo(repoName)\u000a                .ifPresent(repo -&gt; {\u000a                    <span class="hljs-comment">//List&lt;AssetXO&gt; assets = findService.getAssets(repo.getName(), keyword);</span>\u000a                    List&lt;AssetXO&gt; assets = apiService.searchAsset(repo, keyword);\u000a                    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(assets)) {\u000a                        List&lt;<span class="hljs-keyword">String</span>&gt; lines = assets.stream()\u000a                                .<span class="hljs-built_in">map</span>(asset -&gt; <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s;%s"</span>, asset.getPath(), asset.getDownloadUrl()))\u000a                                .toList();\u000a                        fileService.saveList(lines);\u000a                    }\u000a                });\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> findFileAsync() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = fileService.loadList();\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; zipFiles = lines.stream()\u000a                .<span class="hljs-built_in">map</span>(<span class="hljs-built_in">line</span> -&gt; <span class="hljs-built_in">line</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">";"</span>))\u000a                .<span class="hljs-built_in">map</span>(arr -&gt; arr[<span class="hljs-number">0</span>])\u000a                .toList();\u000a        ZipFileAction zipFileAction = <span class="hljs-keyword">new</span> ZipFileAction(zipFiles, findFile);\u000a        ForkJoinPool.commonPool().invoke(zipFileAction);\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> findTextAsync() {\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start"</span>);\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; lines = fileService.loadList();\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; zipFiles = lines.stream()\u000a            .<span class="hljs-built_in">map</span>(<span class="hljs-built_in">line</span> -&gt; <span class="hljs-built_in">line</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">";"</span>))\u000a            .<span class="hljs-built_in">map</span>(arr -&gt; arr[<span class="hljs-number">0</span>])\u000a            .toList();\u000a        ZipTextAction zipTextAction = <span class="hljs-keyword">new</span> ZipTextAction(zipFiles, findText);\u000a        ForkJoinPool.commonPool().invoke(zipTextAction);\u000a        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop"</span>);\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>AsyncAction.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service.async;\u000a\u000a<span class="hljs-keyword">import</span> lombok.Cleanup;\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.springframework.http.HttpMethod;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.util.StreamUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a\u000a<span class="hljs-keyword">import</span> java.io.File;\u000a<span class="hljs-keyword">import</span> java.io.FileOutputStream;\u000a<span class="hljs-keyword">import</span> java.nio.file.Files;\u000a<span class="hljs-keyword">import</span> java.nio.file.Path;\u000a<span class="hljs-keyword">import</span> java.nio.file.Paths;\u000a<span class="hljs-keyword">import</span> java.util.ArrayList;\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a<span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;\u000a\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> class AsyncAction extends RecursiveAction {\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;<span class="hljs-keyword">String</span>&gt; lines;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestTemplate restTemplate;\u000a\u000a    <span class="hljs-keyword">public</span> AsyncAction(List&lt;<span class="hljs-keyword">String</span>&gt; lines, RestTemplate restTemplate) {\u000a        <span class="hljs-keyword">this</span>.lines = lines;\u000a        <span class="hljs-keyword">this</span>.restTemplate = restTemplate;\u000a    }\u000a\u000a    @Override\u000a    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> compute() {\u000a        List&lt;AsyncAction&gt; actionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a        <span class="hljs-keyword">if</span>(CollectionUtils.isEmpty(lines)) {\u000a            <span class="hljs-keyword">return</span>;\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (lines.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) {\u000a            <span class="hljs-keyword">String</span>[] arr = lines.<span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">split</span>(<span class="hljs-string">";"</span>);\u000a            downloadJar(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">1</span>]);\u000a        } <span class="hljs-keyword">else</span> {\u000a            <span class="hljs-built_in">int</span> mid = lines.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;\u000a            <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; linesLeft = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; linesRight = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span> : lines) {\u000a                <span class="hljs-keyword">if</span> (i &lt;= mid) {\u000a                    linesLeft.<span class="hljs-built_in">add</span>(<span class="hljs-built_in">line</span>);\u000a                } <span class="hljs-keyword">else</span> {\u000a                    linesRight.<span class="hljs-built_in">add</span>(<span class="hljs-built_in">line</span>);\u000a                }\u000a                i++;\u000a            }\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> AsyncAction(linesLeft, restTemplate));\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> AsyncAction(linesRight, restTemplate));\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(actionList)) {\u000a            invokeAll(actionList);\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> downloadJar(<span class="hljs-keyword">String</span> localPath, <span class="hljs-keyword">String</span> url) {\u000a        <span class="hljs-keyword">if</span> (url != <span class="hljs-keyword">null</span> &amp;&amp; localPath != <span class="hljs-keyword">null</span>) {\u000a            <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"start localPath: {}, url: {}"</span>, localPath, url);\u000a            <span class="hljs-keyword">try</span> {\u000a                restTemplate.execute(url, HttpMethod.GET, <span class="hljs-keyword">null</span>, response -&gt; {\u000a                    Path path = Paths.<span class="hljs-built_in">get</span>(localPath);\u000a                    <span class="hljs-keyword">if</span> (!Files.exists(path.getParent())) {\u000a                        Files.createDirectories(path.getParent());\u000a                    }\u000a                    File file = <span class="hljs-keyword">null</span>;\u000a                    <span class="hljs-keyword">if</span> (!Files.exists(path)) {\u000a                        file = Files.createFile(path).toFile();\u000a                        @Cleanup\u000a                        FileOutputStream fis = <span class="hljs-keyword">new</span> FileOutputStream(file);\u000a                        StreamUtils.<span class="hljs-built_in">copy</span>(response.getBody(), fis);\u000a                    }\u000a                    <span class="hljs-keyword">return</span> file;\u000a                });\u000a            } <span class="hljs-keyword">catch</span> (Exception e) {\u000a                <span class="hljs-built_in">log</span>.error(<span class="hljs-string">"url: {}, error: {}"</span>, url, e.getMessage());\u000a            }\u000a            <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"stop localPath: {}, url: {}"</span>, localPath, url);\u000a        }\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>AsyncTask.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service.async;\u000a\u000a<span class="hljs-keyword">import</span> lombok.<span class="hljs-keyword">extern</span>.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.binary.StringUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.http.*;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;\u000a<span class="hljs-keyword">import</span> org.springframework.web.util.UriComponentsBuilder;\u000a<span class="hljs-keyword">import</span> org.w3c.dom.NodeList;\u000a<span class="hljs-keyword">import</span> org.xml.sax.InputSource;\u000a<span class="hljs-keyword">import</span> ru.home.nexusfind.utils.HttpUtils;\u000a\u000a<span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;\u000a<span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPath;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPathConstants;\u000a<span class="hljs-keyword">import</span> javax.xml.xpath.XPathFactory;\u000a<span class="hljs-keyword">import</span> java.io.StringReader;\u000a<span class="hljs-keyword">import</span> java.util.ArrayList;\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a<span class="hljs-keyword">import</span> java.util.Optional;\u000a<span class="hljs-keyword">import</span> java.util.Set;\u000a<span class="hljs-keyword">import</span> java.util.concurrent.RecursiveTask;\u000a\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncTask</span>  <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">RecursiveTask</span></span>&lt;<span class="hljs-title">List</span>&lt;<span class="hljs-title">String</span>&gt;&gt; </span>{\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final <span class="hljs-keyword">String</span> METADATA_EXP = <span class="hljs-string">"/metadata/versioning/latest"</span>;\u000a\u000a    <span class="hljs-keyword">private</span> final <span class="hljs-keyword">String</span> basePath;\u000a    <span class="hljs-keyword">private</span> final <span class="hljs-keyword">String</span> path;\u000a    <span class="hljs-keyword">private</span> final RestTemplate restTemplate;\u000a\u000a    <span class="hljs-keyword">public</span> AsyncTask(<span class="hljs-keyword">String</span> basePath, <span class="hljs-keyword">String</span> path, RestTemplate restTemplate) {\u000a        <span class="hljs-built_in">this</span>.basePath = basePath;\u000a        <span class="hljs-built_in">this</span>.path = path;\u000a        <span class="hljs-built_in">this</span>.restTemplate = restTemplate;\u000a    }\u000a\u000a    @Override\u000a    protected List&lt;<span class="hljs-keyword">String</span>&gt; compute() {\u000a        List&lt;<span class="hljs-keyword">String</span>&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();\u000a        List&lt;AsyncTask&gt; taskList = <span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;&gt;();\u000a        HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpHeaders</span>();\u000a        headers.<span class="hljs-keyword">set</span>(HttpHeaders.ACCEPT, MediaType.TEXT_HTML_VALUE);\u000a        HttpEntity&lt;?&gt; entity = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpEntity</span>&lt;&gt;(headers);\u000a        <span class="hljs-keyword">String</span> uri = UriComponentsBuilder.fromHttpUrl(basePath)\u000a                .path(path)\u000a                .encode()\u000a                .toUriString();\u000a        ResponseEntity&lt;<span class="hljs-keyword">String</span>&gt; response = restTemplate.exchange(uri, HttpMethod.GET, entity, <span class="hljs-keyword">String</span>.class);\u000a\u000a        <span class="hljs-keyword">if</span> (response.getStatusCode().is2xxSuccessful() &amp;&amp; HttpUtils.isHtml(response)) {\u000a            Set&lt;<span class="hljs-keyword">String</span>&gt; links = HttpUtils.parseHtml(response.getBody());\u000a            <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(links)) {\u000a                <span class="hljs-keyword">return</span> list;\u000a            }\u000a            Optional&lt;<span class="hljs-keyword">String</span>&gt; optMetadataUri = links.stream().filter(link -&gt; link.endsWith(<span class="hljs-string">"maven-metadata.xml"</span>)).findFirst();\u000a            Optional&lt;<span class="hljs-keyword">String</span>&gt; optVersion = optMetadataUri.flatMap(<span class="hljs-built_in">this</span>:<span class="hljs-type"></span>:getByVersion);\u000a            <span class="hljs-keyword">if</span> (!optMetadataUri.isEmpty() &amp;&amp; !optVersion.isEmpty()) {\u000a                <span class="hljs-keyword">String</span> version = optVersion.<span class="hljs-keyword">get</span>();\u000a                <span class="hljs-keyword">String</span> latestVersion = <span class="hljs-keyword">String</span>.format(<span class="hljs-string">"%s/"</span>, version);\u000a                Optional&lt;AsyncTask&gt; optAsyncTask = links.stream()\u000a                    .filter(link -&gt; StringUtils.equals(link, latestVersion)).findFirst()\u000a                    .map(linkVersion -&gt; {\u000a                        AsyncTask subTask = <span class="hljs-keyword">new</span> <span class="hljs-type">AsyncTask</span>(uri, linkVersion, restTemplate);\u000a                        <span class="hljs-keyword">return</span> subTask;\u000a                    });\u000a                <span class="hljs-keyword">if</span> (!optAsyncTask.isEmpty()) {\u000a                    taskList.add(optAsyncTask.<span class="hljs-keyword">get</span>());\u000a                }\u000a            } <span class="hljs-keyword">else</span> {\u000a                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> link : <span class="hljs-type">links</span>) {\u000a                    <span class="hljs-keyword">if</span> (link.endsWith(<span class="hljs-string">"/"</span>)) {\u000a                        AsyncTask subTask = <span class="hljs-keyword">new</span> <span class="hljs-type">AsyncTask</span>(uri, link, restTemplate);\u000a                        taskList.add(subTask);\u000a                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (link.endsWith(<span class="hljs-string">".jar"</span>)) {\u000a                        list.add(link);\u000a                    }\u000a                }\u000a            }\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(taskList)) {\u000a            invokeAll(taskList);\u000a            <span class="hljs-keyword">return</span> taskList.stream().flatMap(task -&gt; task.join().stream()).toList();\u000a        } <span class="hljs-keyword">else</span> {\u000a            list.stream().forEach(link -&gt; log.info(<span class="hljs-string">"link: {}"</span>, link));\u000a            <span class="hljs-keyword">return</span> list;\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> Optional&lt;<span class="hljs-keyword">String</span>&gt; getByVersion(<span class="hljs-keyword">String</span> uri) {\u000a        HttpHeaders headers = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpHeaders</span>();\u000a        headers.<span class="hljs-keyword">set</span>(HttpHeaders.ACCEPT, MediaType.APPLICATION_XHTML_XML_VALUE);\u000a        HttpEntity&lt;?&gt; entity = <span class="hljs-keyword">new</span> <span class="hljs-type">HttpEntity</span>&lt;&gt;(headers);\u000a        <span class="hljs-keyword">try</span> {\u000a            ResponseEntity&lt;<span class="hljs-keyword">String</span>&gt; response = restTemplate.exchange(uri, HttpMethod.GET, entity, <span class="hljs-keyword">String</span>.class);\u000a            <span class="hljs-keyword">String</span> xml = response.getBody();\u000a            <span class="hljs-keyword">if</span> (response.getStatusCode().is2xxSuccessful() &amp;&amp; HttpUtils.isXml(response) &amp;&amp; xml != <span class="hljs-literal">null</span>) {\u000a                DocumentBuilderFactory builderFactory = DocumentBuilderFactory.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>();\u000a                DocumentBuilder builder = builderFactory.<span class="hljs-keyword">new</span><span class="hljs-type">DocumentBuilder</span>();\u000a                InputSource is = <span class="hljs-keyword">new</span> <span class="hljs-type">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">StringReader</span>(xml));\u000a                org.w3c.dom.Document xmlDocument = builder.parse(is);\u000a                XPath xPath = XPathFactory.<span class="hljs-keyword">new</span><span class="hljs-type">Instance</span>().<span class="hljs-keyword">new</span><span class="hljs-type">XPath</span>();\u000a                NodeList nodeList = (NodeList) xPath.compile(METADATA_EXP).evaluate(xmlDocument, XPathConstants.NODESET);\u000a                <span class="hljs-keyword">String</span> version = nodeList.item(<span class="hljs-number">0</span>).getTextContent();\u000a                <span class="hljs-keyword">return</span> Optional.of(version);\u000a            }\u000a        } <span class="hljs-keyword">catch</span> (Exception e) {\u000a            log.error(<span class="hljs-string">"uri: {}, error: {}"</span>, uri, e.getMessage());\u000a        }\u000a        <span class="hljs-keyword">return</span> Optional.empty();\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>ZipFileAction.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service.async;\u000a\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.<span class="hljs-built_in">binary</span>.StringUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a\u000a<span class="hljs-keyword">import</span> java.io.FileInputStream;\u000a<span class="hljs-keyword">import</span> java.io.IOException;\u000a<span class="hljs-keyword">import</span> java.util.ArrayList;\u000a<span class="hljs-keyword">import</span> java.util.Collections;\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a<span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;\u000a<span class="hljs-keyword">import</span> java.util.zip.ZipEntry;\u000a<span class="hljs-keyword">import</span> java.util.zip.ZipFile;\u000a<span class="hljs-keyword">import</span> java.util.zip.ZipInputStream;\u000a\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> class ZipFileAction extends RecursiveAction  {\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;<span class="hljs-keyword">String</span>&gt; files;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> filename;\u000a\u000a    <span class="hljs-keyword">public</span> ZipFileAction(List&lt;<span class="hljs-keyword">String</span>&gt; files, <span class="hljs-keyword">String</span> filename) {\u000a        <span class="hljs-keyword">this</span>.files = files;\u000a        <span class="hljs-keyword">this</span>.filename = filename.toUpperCase();\u000a    }\u000a\u000a    @Override\u000a    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> compute() {\u000a        List&lt;ZipFileAction&gt; actionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a        <span class="hljs-keyword">if</span>(CollectionUtils.isEmpty(files)) {\u000a            <span class="hljs-keyword">return</span>;\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (files.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) {\u000a            readZip(files.<span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>));\u000a        } <span class="hljs-keyword">else</span> {\u000a            <span class="hljs-built_in">int</span> mid = files.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;\u000a            <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; filesLeft = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; filesRight = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> file : files) {\u000a                <span class="hljs-keyword">if</span> (i &lt;= mid) {\u000a                    filesLeft.<span class="hljs-built_in">add</span>(file);\u000a                } <span class="hljs-keyword">else</span> {\u000a                    filesRight.<span class="hljs-built_in">add</span>(file);\u000a                }\u000a                i++;\u000a            }\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> ZipFileAction(filesLeft, filename));\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> ZipFileAction(filesRight, filename));\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(actionList)) {\u000a            invokeAll(actionList);\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> readZip(<span class="hljs-keyword">String</span> file) {\u000a        <span class="hljs-keyword">try</span>(ZipInputStream zipStream = <span class="hljs-keyword">new</span> ZipInputStream(<span class="hljs-keyword">new</span> FileInputStream(file))) {\u000a            ZipEntry zipEntry;\u000a            <span class="hljs-keyword">while</span> ((zipEntry = zipStream.getNextEntry()) != <span class="hljs-keyword">null</span>) {\u000a                <span class="hljs-keyword">if</span> (!zipEntry.isDirectory()) {\u000a                    <span class="hljs-keyword">String</span> zipFilename = zipEntry.getName().toUpperCase();\u000a                    <span class="hljs-keyword">if</span> (zipFilename.contains(filename)) {\u000a                        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"file: {};{}"</span>, file, filename);\u000a                    }\u000a                }\u000a            }\u000a            zipStream.closeEntry();\u000a        } <span class="hljs-keyword">catch</span> (IOException e) {\u000a            <span class="hljs-built_in">log</span>.error(<span class="hljs-string">"entry: {} {}"</span>, file, e.getMessage());\u000a        }\u000a    }\u000a}\u000a</code></pre>\u000a\u000a<h2>ZipTextAction.java</h2>\u000a<pre><code class="lang-java"><span class="hljs-keyword">package</span> ru.home.nexusfind.service.async;\u000a\u000a<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;\u000a<span class="hljs-keyword">import</span> org.apache.commons.codec.<span class="hljs-built_in">binary</span>.StringUtils;\u000a<span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;\u000a\u000a<span class="hljs-keyword">import</span> java.io.FileInputStream;\u000a<span class="hljs-keyword">import</span> java.io.IOException;\u000a<span class="hljs-keyword">import</span> java.util.ArrayList;\u000a<span class="hljs-keyword">import</span> java.util.List;\u000a<span class="hljs-keyword">import</span> java.util.concurrent.RecursiveAction;\u000a<span class="hljs-keyword">import</span> java.util.zip.ZipEntry;\u000a<span class="hljs-keyword">import</span> java.util.zip.ZipInputStream;\u000a\u000a@Slf4j\u000a<span class="hljs-keyword">public</span> class ZipTextAction extends RecursiveAction {\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;<span class="hljs-keyword">String</span>&gt; files;\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> <span class="hljs-built_in">text</span>;\u000a\u000a    <span class="hljs-keyword">public</span> ZipTextAction(List&lt;<span class="hljs-keyword">String</span>&gt; files, <span class="hljs-keyword">String</span> <span class="hljs-built_in">text</span>) {\u000a        <span class="hljs-keyword">this</span>.files = files;\u000a        <span class="hljs-keyword">this</span>.<span class="hljs-built_in">text</span> = <span class="hljs-built_in">text</span>.toUpperCase();\u000a    }\u000a\u000a    @Override\u000a    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> compute() {\u000a        List&lt;ZipTextAction&gt; actionList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a        <span class="hljs-keyword">if</span>(CollectionUtils.isEmpty(files)) {\u000a            <span class="hljs-keyword">return</span>;\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (files.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) {\u000a            readZip(files.<span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>));\u000a        } <span class="hljs-keyword">else</span> {\u000a            <span class="hljs-built_in">int</span> mid = files.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;\u000a            <span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>;\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; filesLeft = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            List&lt;<span class="hljs-keyword">String</span>&gt; filesRight = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();\u000a            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">String</span> file : files) {\u000a                <span class="hljs-keyword">if</span> (i &lt;= mid) {\u000a                    filesLeft.<span class="hljs-built_in">add</span>(file);\u000a                } <span class="hljs-keyword">else</span> {\u000a                    filesRight.<span class="hljs-built_in">add</span>(file);\u000a                }\u000a                i++;\u000a            }\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> ZipTextAction(filesLeft, <span class="hljs-built_in">text</span>));\u000a            actionList.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> ZipTextAction(filesRight, <span class="hljs-built_in">text</span>));\u000a        }\u000a\u000a        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(actionList)) {\u000a            invokeAll(actionList);\u000a        }\u000a    }\u000a\u000a    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> readZip(<span class="hljs-keyword">String</span> file) {\u000a        <span class="hljs-keyword">try</span>(ZipInputStream zipStream = <span class="hljs-keyword">new</span> ZipInputStream(<span class="hljs-keyword">new</span> FileInputStream(file))) {\u000a            ZipEntry zipEntry;\u000a            <span class="hljs-keyword">while</span> ((zipEntry = zipStream.getNextEntry()) != <span class="hljs-keyword">null</span>) {\u000a                <span class="hljs-keyword">if</span> (!zipEntry.isDirectory()) {\u000a                    <span class="hljs-keyword">String</span> content = StringUtils.newStringUtf8(zipStream.readAllBytes()).toUpperCase();\u000a                    <span class="hljs-keyword">if</span> (content.contains(<span class="hljs-built_in">text</span>)) {\u000a                        <span class="hljs-built_in">log</span>.info(<span class="hljs-string">"text: {};{}"</span>, file, <span class="hljs-built_in">text</span>);\u000a                    }\u000a                }\u000a            }\u000a            zipStream.closeEntry();\u000a        } <span class="hljs-keyword">catch</span> (IOException e) {\u000a            <span class="hljs-built_in">log</span>.error(<span class="hljs-string">"entry: {} {}"</span>, file, e.getMessage());\u000a        }\u000a    }\u000a}\u000a</code></pre>\u000a\u000a</body>\u000a</html>','Java-\u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u0445 Nuxus')
COMMIT
DISCONNECT
/*C5*/SET SCHEMA PUBLIC
DISCONNECT
