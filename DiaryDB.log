/*C3*/SET SCHEMA PUBLIC
DELETE FROM DIARY WHERE ID=536
INSERT INTO DIARY VALUES(536,'2019-01-11 09:40:12','<html><head><meta content="text/html;charset=UTF-8"/></head><body><h1>\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f REST-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0430 SpringBoot</h1><hr/>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadApplication.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.boot.SpringApplication;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\u000a\u000a@SpringBootApplication\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadApplication <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a\u0009<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>static</span> <span style=''font-weight:bold;color:#7B0052;''>void</span> main(String[] args) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a\u0009\u0009SpringApplication.run(RestloadApplication.class, args);\u000a\u0009<span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadConfig.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> com.google.common.collect.ImmutableList;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.context.annotation.Bean;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.context.annotation.Configuration;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.core.task.TaskExecutor;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpEntity;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpHeaders;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.MediaType;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.annotation.EnableAsync;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.web.client.RestTemplate;\u000a\u000a@Configuration\u000a@EnableAsync\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadConfig <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Value(<span style=''color:#2A00FF''>"${login}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String login;\u000a    @Value(<span style=''color:#2A00FF''>"${password}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String password;\u000a    @Value(<span style=''color:#2A00FF''>"${count}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> <span style=''font-weight:bold;color:#7B0052;''>int</span> count;\u000a\u000a    @Bean \u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> RestTemplate getRestTemplate() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> RestTemplate();  \u000a    <span style=''font-weight:bold;color:#D3171B''>}</span> \u000a     \u000a    @Bean \u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> TaskExecutor taskExecutor() <span style=''font-weight:bold;color:#D3171B''>{</span> \u000a        ThreadPoolTaskExecutor executor = <span style=''font-weight:bold;color:#7B0052;''>new</span> ThreadPoolTaskExecutor(); \u000a        executor.setCorePoolSize(count);\u000a        executor.setMaxPoolSize(count);\u000a        executor.setQueueCapacity(25); \u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> executor; \u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Bean\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> HttpEntity&lt;String&gt; httpEntity() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val headers = <span style=''font-weight:bold;color:#7B0052;''>new</span> HttpHeaders();\u000a        headers.setBasicAuth(login, password);\u000a        headers.setAccept(ImmutableList.of(MediaType.APPLICATION_JSON));\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> HttpEntity&lt;&gt;(headers);\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Bean\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> RestTemplate restTemplate() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> RestTemplate();\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadClient.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Autowired;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpEntity;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpMethod;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.annotation.Async;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.stereotype.Component;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.web.client.RestTemplate;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.HashMap;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.concurrent.CompletableFuture;\u000a\u000a@Component\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadClient <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> RestTemplate restTemplate;\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> HttpEntity&lt;String&gt; httpEntity;\u000a    @Value(<span style=''color:#2A00FF''>"${url.subscriptions}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String urlSubscriptions;\u000a    @Value(<span style=''color:#2A00FF''>"${url.me}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String urlMe;\u000a\u000a    @Async\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> CompletableFuture&lt;String&gt; getSubscriptions() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val params = <span style=''font-weight:bold;color:#7B0052;''>new</span> HashMap&lt;String, String&gt;();\u000a        params.put(<span style=''color:#2A00FF''>"owner"</span>, <span style=''color:#2A00FF''>"1034"</span>);\u000a        params.put(<span style=''color:#2A00FF''>"billingServiceId"</span>, <span style=''color:#2A00FF''>"1"</span>);\u000a        params.put(<span style=''color:#2A00FF''>"serviceCode"</span>, <span style=''color:#2A00FF''>""</span>);\u000a        params.put(<span style=''color:#2A00FF''>"withRemoved"</span>, <span style=''color:#2A00FF''>"true"</span>);\u000a        val response = restTemplate.exchange(urlSubscriptions, HttpMethod.GET, httpEntity, String.class, params);\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> CompletableFuture.completedFuture(response.getBody());\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Async\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> CompletableFuture&lt;String&gt; getMy() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val response = restTemplate.exchange(urlMe, HttpMethod.GET, httpEntity, String.class);\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> CompletableFuture.completedFuture(response.getBody());\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadRunner.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.extern.slf4j.Slf4j;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.var;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Autowired;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.stereotype.Component;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> javax.annotation.PostConstruct;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.HashMap;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.concurrent.CompletableFuture;\u000a\u000a@Component\u000a@Slf4j\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadRunner <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> RestloadClient client;\u000a    @Value(<span style=''color:#2A00FF''>"${count}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> <span style=''font-weight:bold;color:#7B0052;''>int</span> count;\u000a\u000a    @PostConstruct\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>void</span> run() <span style=''font-weight:bold;color:#7B0052;''>throws</span> Exception <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        var map = <span style=''font-weight:bold;color:#7B0052;''>new</span> HashMap&lt;Integer, CompletableFuture&lt;String&gt;&gt;();\u000a        <span style=''font-weight:bold;color:#7B0052;''>for</span>(<span style=''font-weight:bold;color:#7B0052;''>int</span> i = 0; i &lt; count; ++i) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a            map.put(i, client.getSubscriptions());\u000a        <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a        <span style=''font-weight:bold;color:#7B0052;''>boolean</span> flag = <span style=''font-weight:bold;color:#7B0052;''>false</span>;\u000a        <span style=''font-weight:bold;color:#7B0052;''>while</span>(!flag) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a            <span style=''font-weight:bold;color:#7B0052;''>int</span> countt = 0;\u000a            val iterator = map.entrySet().iterator();\u000a            <span style=''font-weight:bold;color:#7B0052;''>while</span>(iterator.hasNext()) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a                val entry = iterator.next();\u000a                <span style=''font-weight:bold;color:#7B0052;''>if</span>(entry.getValue().isDone()) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a                    countt++;\u000a                    log.info(<span style=''color:#2A00FF''>"process {} is done: {}, remains: {}"</span>, entry.getKey(), entry.getValue().get(), map.size()-1);\u000a                    iterator.remove();\u000a                <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a            <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a            flag = (countt == count);\u000a        <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">application.properties</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''>login = nis\u000apassword = nis\u000aurl.subscriptions = http:<span style=''color:#3F7F5F''>//localhost:8081/billing-rest-api/rest/subscriptions\u000a</span>url.me = http:<span style=''color:#3F7F5F''>//localhost:8081/mts-poisk-rest-api/rest/persons/me\u000a</span>count = 1000</pre>\u000a\u000a<div lang="en-US" dir="ltr">\u000a<pre class="western">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\u000a&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\u000a\u0009xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\u000a\u0009&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\u000a\u0009&lt;parent&gt;\u000a\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\u000a\u0009\u0009&lt;version&gt;2.1.1.RELEASE&lt;/version&gt;\u000a\u0009\u0009&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\u000a\u0009&lt;/parent&gt;\u000a\u0009&lt;groupId&gt;ru.nisglonass.test&lt;/groupId&gt;\u000a\u0009&lt;artifactId&gt;restload&lt;/artifactId&gt;\u000a\u0009&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\u000a\u0009&lt;name&gt;restload&lt;/name&gt;\u000a\u0009&lt;description&gt;Test load for ngenie-resource&lt;/description&gt;\u000a\u000a\u0009&lt;properties&gt;\u000a\u0009\u0009&lt;java.version&gt;1.8&lt;/java.version&gt;\u000a\u0009&lt;/properties&gt;\u000a\u000a\u0009&lt;dependencies&gt;\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u0009\u0009\u000a\u0009\u0009&lt;dependency&gt; \u000a            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \u000a            &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt; \u000a        &lt;/dependency&gt;\u000a        \u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;lombok&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;optional&gt;true&lt;/optional&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;com.google.guava&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;guava&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;version&gt;27.0.1-jre&lt;/version&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;scope&gt;test&lt;/scope&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u0009&lt;/dependencies&gt;\u000a\u000a\u0009&lt;build&gt;\u000a\u0009\u0009&lt;plugins&gt;\u000a\u0009\u0009\u0009&lt;plugin&gt;\u000a\u0009\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;/plugin&gt;\u000a\u0009\u0009&lt;/plugins&gt;\u000a\u0009&lt;/build&gt;\u000a\u000a&lt;/project&gt;</pre>\u000a</div>\u000a\u000a</body></html>','\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f REST-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0430 SpringBoot')
COMMIT
/*C4*/SET SCHEMA PUBLIC
DELETE FROM DIARY WHERE ID=536
INSERT INTO DIARY VALUES(536,'2019-01-11 09:40:12','<html><head><meta content="text/html;charset=UTF-8"/></head><body><h1>\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f REST-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0430 SpringBoot</h1><hr/>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadApplication.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.boot.SpringApplication;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.boot.autoconfigure.SpringBootApplication;\u000a\u000a@SpringBootApplication\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadApplication <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a\u0009<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>static</span> <span style=''font-weight:bold;color:#7B0052;''>void</span> main(String[] args) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a\u0009\u0009SpringApplication.run(RestloadApplication.class, args);\u000a\u0009<span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadConfig.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> com.google.common.collect.ImmutableList;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.context.annotation.Bean;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.context.annotation.Configuration;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.core.task.TaskExecutor;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpEntity;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpHeaders;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.MediaType;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.annotation.EnableAsync;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.web.client.RestTemplate;\u000a\u000a@Configuration\u000a@EnableAsync\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadConfig <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Value(<span style=''color:#2A00FF''>"${login}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String login;\u000a    @Value(<span style=''color:#2A00FF''>"${password}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String password;\u000a    @Value(<span style=''color:#2A00FF''>"${count}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> <span style=''font-weight:bold;color:#7B0052;''>int</span> count;\u000a\u000a    @Bean \u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> RestTemplate getRestTemplate() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> RestTemplate();  \u000a    <span style=''font-weight:bold;color:#D3171B''>}</span> \u000a     \u000a    @Bean \u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> TaskExecutor taskExecutor() <span style=''font-weight:bold;color:#D3171B''>{</span> \u000a        ThreadPoolTaskExecutor executor = <span style=''font-weight:bold;color:#7B0052;''>new</span> ThreadPoolTaskExecutor(); \u000a        executor.setCorePoolSize(count);\u000a        executor.setMaxPoolSize(count);\u000a        executor.setQueueCapacity(25); \u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> executor; \u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Bean\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> HttpEntity&lt;String&gt; httpEntity() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val headers = <span style=''font-weight:bold;color:#7B0052;''>new</span> HttpHeaders();\u000a        headers.setBasicAuth(login, password);\u000a        headers.setAccept(ImmutableList.of(MediaType.APPLICATION_JSON));\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> HttpEntity&lt;&gt;(headers);\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Bean\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> RestTemplate restTemplate() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> <span style=''font-weight:bold;color:#7B0052;''>new</span> RestTemplate();\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadClient.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Autowired;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpEntity;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.http.HttpMethod;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.scheduling.annotation.Async;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.stereotype.Component;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.web.client.RestTemplate;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.HashMap;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.concurrent.CompletableFuture;\u000a\u000a@Component\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadClient <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> RestTemplate restTemplate;\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> HttpEntity&lt;String&gt; httpEntity;\u000a    @Value(<span style=''color:#2A00FF''>"${url.subscriptions}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String urlSubscriptions;\u000a    @Value(<span style=''color:#2A00FF''>"${url.me}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> String urlMe;\u000a\u000a    @Async\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> CompletableFuture&lt;String&gt; getSubscriptions() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val params = <span style=''font-weight:bold;color:#7B0052;''>new</span> HashMap&lt;String, String&gt;();\u000a        params.put(<span style=''color:#2A00FF''>"owner"</span>, <span style=''color:#2A00FF''>"1034"</span>);\u000a        params.put(<span style=''color:#2A00FF''>"billingServiceId"</span>, <span style=''color:#2A00FF''>"1"</span>);\u000a        params.put(<span style=''color:#2A00FF''>"serviceCode"</span>, <span style=''color:#2A00FF''>""</span>);\u000a        params.put(<span style=''color:#2A00FF''>"withRemoved"</span>, <span style=''color:#2A00FF''>"true"</span>);\u000a        val response = restTemplate.exchange(urlSubscriptions, HttpMethod.GET, httpEntity, String.class, params);\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> CompletableFuture.completedFuture(response.getBody());\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a    @Async\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> CompletableFuture&lt;String&gt; getMy() <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        val response = restTemplate.exchange(urlMe, HttpMethod.GET, httpEntity, String.class);\u000a        <span style=''font-weight:bold;color:#7B0052;''>return</span> CompletableFuture.completedFuture(response.getBody());\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">RestloadRunner.java</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''><span style=''font-weight:bold;color:#7B0052;''>package</span> ru.nisglonass.test;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.extern.slf4j.Slf4j;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.val;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> lombok.var;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Autowired;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.beans.factory.annotation.Value;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> org.springframework.stereotype.Component;\u000a\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> javax.annotation.PostConstruct;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.HashMap;\u000a<span style=''font-weight:bold;color:#7B0052;''>import</span> java.util.concurrent.CompletableFuture;\u000a\u000a@Component\u000a@Slf4j\u000a<span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>class</span> RestloadRunner <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a    @Autowired\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> RestloadClient client;\u000a    @Value(<span style=''color:#2A00FF''>"${count}"</span>)\u000a    <span style=''font-weight:bold;color:#7B0052;''>private</span> <span style=''font-weight:bold;color:#7B0052;''>int</span> count;\u000a\u000a    @PostConstruct\u000a    <span style=''font-weight:bold;color:#7B0052;''>public</span> <span style=''font-weight:bold;color:#7B0052;''>void</span> run() <span style=''font-weight:bold;color:#7B0052;''>throws</span> Exception <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a        var map = <span style=''font-weight:bold;color:#7B0052;''>new</span> HashMap&lt;Integer, CompletableFuture&lt;String&gt;&gt;();\u000a        <span style=''font-weight:bold;color:#7B0052;''>for</span>(<span style=''font-weight:bold;color:#7B0052;''>int</span> i = 0; i &lt; count; ++i) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a            map.put(i, client.getSubscriptions());\u000a        <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a\u000a        <span style=''font-weight:bold;color:#7B0052;''>boolean</span> flag = <span style=''font-weight:bold;color:#7B0052;''>false</span>;\u000a        <span style=''font-weight:bold;color:#7B0052;''>while</span>(!flag) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a            <span style=''font-weight:bold;color:#7B0052;''>int</span> countt = 0;\u000a            val iterator = map.entrySet().iterator();\u000a            <span style=''font-weight:bold;color:#7B0052;''>while</span>(iterator.hasNext()) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a                val entry = iterator.next();\u000a                <span style=''font-weight:bold;color:#7B0052;''>if</span>(entry.getValue().isDone()) <span style=''font-weight:bold;color:#D3171B''>{</span>\u000a                    countt++;\u000a                    log.info(<span style=''color:#2A00FF''>"process {} is done: {}, remains: {}"</span>, entry.getKey(), entry.getValue().get(), map.size()-1);\u000a                    iterator.remove();\u000a                <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a            <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a            flag = (countt == count);\u000a        <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a    <span style=''font-weight:bold;color:#D3171B''>}</span>\u000a<span style=''font-weight:bold;color:#D3171B''>}</span></pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">application.properties</font></center></td></tr>\u000a</table>\u000a\u000a<pre style=''text-align: left; border: 1px dashed #008DEF; line-height: 18px; padding: 15px; font-size: 13px; font-family:''Courier New'', Courier, monospace; overflow: auto;''>login = nis\u000apassword = nis\u000aurl.subscriptions = http:<span style=''color:#3F7F5F''>//localhost:8081/billing-rest-api/rest/subscriptions\u000a</span>url.me = http:<span style=''color:#3F7F5F''>//localhost:8081/mts-poisk-rest-api/rest/persons/me\u000a</span>count = 1000</pre>\u000a\u000a<table CELLSPACING=0 CELLPADDING=5 COLS=1 WIDTH="100%" BGCOLOR="#c0c0c0" >\u000a<tr><td><center>\u000a<font face="Arial, Helvetica" color="#000000">pom.xml</font></center></td></tr>\u000a</table>\u000a\u000a<div lang="en-US" dir="ltr">\u000a<pre class="western">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\u000a&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\u000a\u0009xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\u000a\u0009&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\u000a\u0009&lt;parent&gt;\u000a\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\u000a\u0009\u0009&lt;version&gt;2.1.1.RELEASE&lt;/version&gt;\u000a\u0009\u0009&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\u000a\u0009&lt;/parent&gt;\u000a\u0009&lt;groupId&gt;ru.nisglonass.test&lt;/groupId&gt;\u000a\u0009&lt;artifactId&gt;restload&lt;/artifactId&gt;\u000a\u0009&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\u000a\u0009&lt;name&gt;restload&lt;/name&gt;\u000a\u0009&lt;description&gt;Test load for ngenie-resource&lt;/description&gt;\u000a\u000a\u0009&lt;properties&gt;\u000a\u0009\u0009&lt;java.version&gt;1.8&lt;/java.version&gt;\u000a\u0009&lt;/properties&gt;\u000a\u000a\u0009&lt;dependencies&gt;\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u0009\u0009\u000a\u0009\u0009&lt;dependency&gt; \u000a            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; \u000a            &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt; \u000a        &lt;/dependency&gt;\u000a        \u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;lombok&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;optional&gt;true&lt;/optional&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;com.google.guava&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;guava&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;version&gt;27.0.1-jre&lt;/version&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u000a\u0009\u0009&lt;dependency&gt;\u000a\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;scope&gt;test&lt;/scope&gt;\u000a\u0009\u0009&lt;/dependency&gt;\u000a\u0009&lt;/dependencies&gt;\u000a\u000a\u0009&lt;build&gt;\u000a\u0009\u0009&lt;plugins&gt;\u000a\u0009\u0009\u0009&lt;plugin&gt;\u000a\u0009\u0009\u0009\u0009&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\u000a\u0009\u0009\u0009\u0009&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\u000a\u0009\u0009\u0009&lt;/plugin&gt;\u000a\u0009\u0009&lt;/plugins&gt;\u000a\u0009&lt;/build&gt;\u000a\u000a&lt;/project&gt;</pre>\u000a</div>\u000a\u000a</body></html>','\u041f\u0440\u0438\u043c\u0435\u0440 \u043d\u0430\u0433\u0440\u0443\u0437\u043e\u0447\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f REST-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u043d\u0430 SpringBoot')
COMMIT
/*C3*/DISCONNECT
/*C4*/DISCONNECT
